; cal_abcd.sa
; cal bilinear interpolation
; a(in) -> src_data[x0][y0]
; b(in) -> src_data[x0+1][y0]
; c(in) -> src_data[x0][y0+1]
; d(in) -> src_data[x0+1][y0+1]
; u, v(in)  -> i or j*times - (int32_t)(i or j*times)
; q_var(in) -> 2^q*var -> q_var
; @date 2021107

	.global _cal_abcd

_cal_abcd: .cproc a,b,c,d,u,v,q_var
			.reg rt_var
			.reg tmp, u_1,v_1
			.reg a_p,b_p,c_p,d_p
			.reg u_b,u1_b,v_b,v1_b
			.reg a_b,b_b,c_b,d_b
			mvk 1,tmp
			||zero	rt_var
			shl tmp,q_var,tmp
			sub	tmp,u,u_1
			||sub	tmp,v,v_1
			mvk 1,tmp
			; 1<<q_var
			shl tmp,q_var,tmp
			; find 1,0
			cmpeq	tmp,u,u_b
			cmpeq	tmp,u_1,u1_b
			cmpeq	tmp,v,v_b
			cmpeq	tmp,v_1,v1_b
			; prevent overflow only for u/v=1,0
			; jump to situation
			; u=1
			[u_b] B u_255
			; u=0
			[u1_b]B u_000
			; normal mode a * (1 - u) * (1 - v) + b * u * (1 - v) + c * v * (1 - u) + u * v * d
			mpyu	u_1,	v_1,	a_p
			||mpyu	u,  	v_1,	b_p
			||mpyu	u_1,	v,  	c_p
			||mpyu	u,  	v,  	d_p
			mpyu	a_p,	a,		a_p
			||mpyu	b_p,  	b,		b_p
			||mpyu	c_p,	c,  	c_p
			||mpyu	d_p,  	d,  	d_p
			add 	a_p, b_p, a_p
			||add 	c_p, d_p, c_p
			add		a_p,c_p,rt_var
			|| shl	q_var,1,tmp
			; var_q back to int_var
			shru	rt_var,tmp,rt_var
			B early_stop
u_255:
			; v=u=1
			[v_b] B uv_255
			; u=1 v=0
			[v1_b]B u_255_v_000
			mpyu	v_1,  	b,		b_p
			||mpyu	v,  	d,  	d_p
			add 	d_p, b_p, rt_var
			shru	rt_var,q_var,rt_var
			B early_stop
u_000:
			[v_b] B u_000_v_255
			[v1_b]B uv_000
			mpyu	v_1,	a,		a_p
			||mpyu	v,	c,  	c_p
			add 	a_p, c_p, rt_var
			shru	rt_var,q_var,rt_var
			B early_stop
uv_255:
			add d,0,rt_var
			B early_stop
u_255_v_000:
			add b,0,rt_var
			B early_stop
u_000_v_255:
			add c,0,rt_var
			B early_stop
uv_000:
			add a,0,rt_var
			B early_stop
early_stop:
			.return rt_var
			.endproc
